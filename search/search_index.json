{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-duke","text":"<p>django-duke allows you to easily integrate predefined plugins into your Django project. Main idea is to achive zero-configuration approach and simplify installation process of popular application.</p>"},{"location":"#why","title":"Why?","text":"<p>When you start a new Django project, you usually need to install some apps and configure them. For example, you need to install <code>django-debug-toolbar</code> and add it to <code>INSTALLED_APPS</code> and <code>MIDDLEWARE</code> settings and add <code>INTERNAL_IPS</code> setting. Of course, you can copy-paste this configuration from some other project, but it's not very convenient. django-duke allows you to install <code>django-duke-debug-toolbar</code> package and it will automatically add <code>django-debug-toolbar</code> to <code>INSTALLED_APPS</code> and <code>MIDDLEWARE</code> and <code>INTERNAL_IPS</code> settings.</p> <p>Wait! You forget about add paths to <code>urls.py</code> file... and Duke will do it for you!</p>"},{"location":"#how-it-works","title":"How it works?","text":"<p>django-duke utilizes Python's entrypoint mechanism to find plugins. In short, it searches for <code>duke.plugins</code> entrypoint in all installed packages and loads them.</p>"},{"location":"#what-is-a-plugin","title":"What is a plugin?","text":"<p>Plugin in django-duke is a tiny python package that contains configuration for some app. It can be a django app, for example <code>django-duke-debug-toolbar</code> - it contains configuration for <code>debug_toolbar</code> app.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p><code>django-duke</code> uses the django-configuration package to manage configuration. This means that the first thing you need to do is install <code>django-configuration</code> and <code>django-duke</code>:</p> <pre><code>pip install django-configuration django-duke\n# or\npoetry add django-configuration django-duke\n</code></pre> <p>Then, you need to modify a <code>settings.py</code>, <code>manage.py</code>, <code>wsgi.py</code> and <code>asgi.py</code> file in your project's root directory according to the django-configuration documentation.</p> <p>Next step is to get Duke's configuration class. You can do this by importing <code>DukeConfiguration</code> from <code>django-duke</code>:</p> <pre><code># settings.py\nfrom configurations import Configuration\nfrom duke import get_configuration_class\n\nDukeConfiguration = get_configuration_class()\n\nclass Base(DukeConfiguration, Configuration):\n    @property\n    def INSTALLED_APPS(self):\n        return super().INSTALLED_APPS + [\n            ...\n        ]\n    @property\n    def MIDDLEWARE(self):\n        return super().MIDDLEWARE + [\n            ...\n        ]\n</code></pre> <p>Notice</p> <p>You need to inherit from <code>DukeConfiguration</code> before <code>Configuration</code> to make sure that Duke's configuration is applied first.</p> <p>Also you need to use <code>@property</code> decorator for <code>INSTALLED_APPS</code> and <code>MIDDLEWARE</code> properties to make sure that Duke's configuration is applied after your project's configuration.</p> <p>And finally, you need unpack urls from <code>duke.urls</code> into your project's <code>urls.py</code>:</p> <p><pre><code># urls.py\nfrom duke import get_urls\n\nurlpatterns = [\n    ...\n    *get_urls(),\n    ...\n]\n# or\nurlpatterns += get_urls()\n</code></pre> Now you can install Duke's plugins and start using them. Check out the plugins section for more information.</p>"},{"location":"plugins/","title":"Plugins","text":""},{"location":"plugins/#django-duke-browser-reload","title":"django-duke-browser-reload","text":"<p>Popular application for automatic browser reload when files are changed.</p> <p>Warning</p> <p>This plugin is not recommended to be working in production environment. Pay attention to the installation command, it is installed only in the dev group.</p>"},{"location":"plugins/#installation-command","title":"Installation command","text":"<pre><code>poetry add --group dev install django-duke-browser-reload\n</code></pre>"},{"location":"plugins/#configuration","title":"Configuration","text":"<p>n/a</p>"},{"location":"plugins/#resources","title":"Resources","text":"<ul> <li>django-browser-loader code</li> </ul>"},{"location":"plugins/#django-duke-debug-toolbar","title":"django-duke-debug-toolbar","text":"<p>Must have application for debugging Django project.</p> <p>Warning</p> <p>This plugin is not recommended to be working in production environment. Pay attention to the installation command, it is installed only in the dev group.</p>"},{"location":"plugins/#installation-command_1","title":"Installation command","text":"<pre><code>poetry add --group dev install django-duke-debug-toolbar\n</code></pre>"},{"location":"plugins/#configuration_1","title":"Configuration","text":"<p>Export environment variables:</p> <ul> <li><code>DEBUG_TOOLBAR_INTERNAL_IPS</code> - list of IP addresses that have access to the debug toolbar (default: <code>127.0.0.1</code>)</li> </ul>"},{"location":"plugins/#resources_1","title":"Resources","text":"<ul> <li>django-debug-toolbar code</li> <li>Documentation</li> </ul>"},{"location":"plugins/#django-duke-sentry","title":"django-duke-sentry","text":"<p>Good for tracking errors in production.</p>"},{"location":"plugins/#installation-command_2","title":"Installation command","text":"<pre><code>poetry add install django-duke-sentry\n</code></pre>"},{"location":"plugins/#configuration_2","title":"Configuration","text":"<p>Export environment variables:</p> <ul> <li><code>SENTRY_DSN</code> - DSN for Sentry project.</li> </ul>"},{"location":"plugins/#resources_2","title":"Resources","text":"<ul> <li>sentry code</li> <li>Documentation</li> </ul>"},{"location":"plugins/#todo","title":"TODO","text":"<ul> <li>django-duke-dramatiq</li> <li>django-duke-extensions</li> </ul>"}]}